package db

import (
	"github.com/GuiaBolso/darwin"
)

var migrations = []darwin.Migration{
	{
		Version:     1,
		Description: "Creating builds table",
		Script: `
			CREATE TABLE builds (
				id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
				name text NOT NULL,
				revision text NOT NULL
			);
		`,
	},
	{
		Version:     2,
		Description: "Creating records table",
		Script: `
			CREATE TABLE records (
				id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
				build_id bigint REFERENCES builds (id),
				filename text NOT NULL,
				s3_key text NOT NULL UNIQUE,
				UNIQUE (build_id, filename)
			)
		`,
	},
	{
		Version:     3,
		Description: "Adding build status and other fields",
		Script: `
			CREATE TYPE build_status AS ENUM
				('created','started','succeeded','failed');
			ALTER TABLE builds
				ADD COLUMN status build_status NOT NULL DEFAULT 'created',
				ADD COLUMN full_revision text,
				ADD COLUMN created_at timestamp without time zone NOT NULL DEFAULT now(),
				ADD COLUMN started_at timestamp without time zone,
				ADD COLUMN finished_at timestamp without time zone;
		`,
	},
}

// Migrate runs any necessary migrations against the database.
//
// This will usually run when imaged is started so that the database is in a consistent state.
func (db *Connection) Migrate() error {
	driver := darwin.NewGenericDriver(db.DB.DB, darwin.PostgresDialect{})
	d := darwin.New(driver, migrations, nil)
	return d.Migrate()
}
